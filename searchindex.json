{"categories":[{"title":"accessibility","uri":"https://bernd.dev/categories/accessibility/"},{"title":"productivity","uri":"https://bernd.dev/categories/productivity/"}],"posts":[{"content":"Is your video too long for upload to Twitter or Instagram? Do you want to export just a specific clip? Using video editors to trim videos requires reencoding the entire video. Instead I will show you how to instantly trim your videos and even maintain embedded subtitle tracks.\nBackground A few days ago I created a post on easily adding subtitles to your videos. Today I wanted to verify that Twitter correctly shows these subtitles, but I discovered that my video was too long. Having played with FFmpeg I suspected that there may be a more efficient way for trimming videos than using a video editor. Be prepared to have your mind blown! ðŸ¤¯\nRequirements FFmpeg You will need the open-source FFmpeg tool.\n FFmpeg is the leading multimedia framework, able to decode, encode, transcode, mux, demux, stream, filter and play pretty much anything that humans and machines have created.\n Please follow the installation instructions here. On Mac, simply use Homebrew with brew install ffmpeg\nInstantly trim videos The following command reads the source video and copies all streams contained within (video, audio, subtitles) to the output. The various time parameters ensure only a specific part of the original video is written to the output. The video and audio streams and not reencoded. For this reason this operation is near instant. A huge time saving over workflows involving video editors.\nINFILE=\u0026quot;video.mp4\u0026quot; OUTFILE=\u0026quot;shortenedclip.mp4\u0026quot; START=\u0026quot;00:00:12.35\u0026quot; # Start Time in hh:mm:ss.msec format DURATION=\u0026quot;00:01:05.4\u0026quot; # Duration in hh:mm:ss.msec format ################## Alternative format ################## # START=\u0026quot;12.35\u0026quot; # Start time in s.msec format # # DURATION=\u0026quot;65.4\u0026quot; # Duration time in s.msec format # ######################################################## ffmpeg -ss $START -i $INFILE -c copy -map 0 -t $DURATION $OUTFILE # If you prefer you can also specify an end time similar to the start time END=\u0026quot;00:01:12.75\u0026quot; ffmpeg -ss $START -i $INFILE -c copy -map 0 -to $END $OUTFILE  ","id":0,"section":"posts","summary":"\u003cp\u003eIs your video too long for upload to Twitter or Instagram? Do you want to export just a specific clip? Using video editors to trim videos requires reencoding the entire video. Instead I will show you how to \u003cstrong\u003einstantly\u003c/strong\u003e trim your videos and even maintain embedded subtitle tracks.\u003c/p\u003e","tags":["video","ffmpeg","bash","productivity"],"title":"Trim Videos Instantly","uri":"https://bernd.dev/2020/04/trim-videos-instantly/","year":"2020"},{"content":"For accessibility reasons all video content you create should be captioned, but adding subtitles can be a daunting task. In this article we cover how to quickly and easily add subtitles to your existing videos without any video editing software.\nRequirements Inputs Video Format: This approach will only work for MP4 videos. Both H.264 and H.265/HEVC are supported.\nCaption / Subtitle file: Either SRT or WebVTT format are supported. Don\u0026rsquo;t have a caption file? See instructions below.\nFFmpeg The instructions rely on the open-source FFmpeg tool.\n FFmpeg is the leading multimedia framework, able to decode, encode, transcode, mux, demux, stream, filter and play pretty much anything that humans and machines have created.\n Please follow the installation instructions here. On Mac, simply use Homebrew with brew install ffmpeg\nCreating a caption file automatically (optional) If you do not have a captions file with subtitles for your video you can easily auto-caption your video with one of two methods.\n Upload your video to YouTube. YouTube can automatically caption your video. Captions can be downloaded in SRT file format. If your company has Microsoft Stream, upload your video to enjoy auto-captioning. Once the captions have been generated you can easily make edits through the web interface before downloading your captions in WebVTT format.  Making subtitles selectable These subtitles can be toggled on or off in any video player that supports subtitles.\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $INFILE -i $SUBTITLES -c copy -c:s mov_text \\ -metadata:s:s:0 language=eng outfile_selectable.mp4  Multiple languages You can even have multiple subtitles in different languages all within the same video.\n# Replace with your input video and subtitle files INFILE=video.mp4 SUBTITLESENG=english.vtt SUBTITLEGER=german.vtt SUBTITLESSPA=spanish.vtt ffmpeg -i $INFILE -i $SUBTITLESENG -i $SUBTITLESGER -i $SUBTITLESSPA \\ -map 0 -map 1:s -map 2:s -map 3:s -c copy -c:s mov_text -c:s mov_text c:s mov_text \\ -metadata:s:s:0 language=eng -metadata:s:s:1 language=ger \\ -metadata:s:s:2 language=spa outfile_selectable_multi.mp4  Burned in subtitles These subtitles are part of the video itself and cannot be toggled off.\nWe will need to render the video again with the subtitles permanently added into the video stream. Note that this will take some time depending on the video duration, quality and the quality of your CPU and GPU.\nTradeoff: While hardware accelerated encoding using GPUs is generally significantly faster, software encoding (CPU only) produces smaller files and better quality.\nTradeoff: H.264 has the most compatibility. You likely have hardware support for encoding and decoding. H.265/HEVC files are 25-50% more efficient but decoding is much more compute intensive. Only recent GPUs have hardware support for encoding in this format. Nevertheless, H.265/HEVC is the format of the future.\nFor output in H.264 with hardware encoding on MacOS\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vf ass=temp.ass -vcodec h264_videotoolbox \\ -b:v $BITRATE -c:a copy output_burnedin.mp4  For H.264 with hardware encoding on Windows/Linux with NVIDIA GPU\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vf ass=temp.ass -vcodec h264_nvenc \\ -b:v $BITRATE -c:a copy output_burnedin.mp4  For H.264 with software encoding on any operating system\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vf ass=temp.ass -vcodec libx264 \\ -b:v $BITRATE -c:a copy output_burnedin.mp4  For H.265/HEVC with hardware encoding on MacOS\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vcodec hevc_videotoolbox -tag:v hvc1 \\ -b:v $BITRATE -c:a copy -vf ass=temp.ass output_burnedin.mp4  For H.265/HEVC with hardware encoding on Windows/Linux with NVIDIA GPU\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vcodec hevc_nvenc -tag:v hvc1 \\ -b:v $BITRATE -c:a copy -vf ass=temp.ass output_burnedin.mp4  For H.265/HEVC software encoding on any operating system\n# Replace with your input video and subtitle file INFILE=video.mp4 SUBTITLES=subtitles.vtt ffmpeg -i $SUBTITLES temp.ass \u0026amp;\u0026amp; \\ BITRATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate \\ -of default=noprint_wrappers=1:nokey=1 $INFILE) \u0026amp;\u0026amp; \\ ffmpeg -i $INFILE -vcodec libx265 -tag:v hvc1 \\ -b:v $BITRATE -c:a copy -vf ass=temp.ass output_burnedin.mp4  Note: If the source video was in H.264 format you can also use the H.265 command to produce a final video in H.265/HEVC format. Since H.265 is 25-50% more efficient you should be able to reduce the Bitrate and still maintain the same video quality.\n","id":1,"section":"posts","summary":"\u003cp\u003eFor accessibility reasons all video content you create should be captioned, but adding subtitles can be a daunting task. In this article we cover how to quickly and easily add subtitles to your existing videos without any video editing software.\u003c/p\u003e","tags":["video","ffmpeg","bash","accessibility"],"title":"Adding subtitles to your videos the easy way","uri":"https://bernd.dev/2020/04/adding-subtitles/","year":"2020"}],"tags":[{"title":"accessibility","uri":"https://bernd.dev/tags/accessibility/"},{"title":"bash","uri":"https://bernd.dev/tags/bash/"},{"title":"ffmpeg","uri":"https://bernd.dev/tags/ffmpeg/"},{"title":"index","uri":"https://bernd.dev/tags/index/"},{"title":"productivity","uri":"https://bernd.dev/tags/productivity/"},{"title":"video","uri":"https://bernd.dev/tags/video/"}]}